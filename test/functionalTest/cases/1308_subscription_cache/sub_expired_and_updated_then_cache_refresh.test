# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
notifyFormat_ngsi10

--SHELL-INIT--
dbInit CB
brokerStart CB 38,101,102 IPv4 -subCacheIval 8
accumulatorStart

--SHELL--

#
# 01. Create entity E10, attribute A1
# 02. Subscribe to E1.*/A1, duration 2 secs
# 03. Statistics - just for fun
# 04. Sleep 3 secs to let the subscription expire
# 05. Update subscription, duration 30 secs
# 06. Statistics - to see the sub-update
# 07. Sleep 6 secs to let the cache be refreshed
# 08. Statistics - see 2 refresh, one notification
# 09. Update E10/A1
# 10. Update E10/A1
# 11. Update E10/A1
# 12. Statistics - see 2 refresh, four notifications
# 13. Dump accumulator - see four notifications
#

echo "01. Create entity E10, attribute A1"
echo "==================================="
payload='{
  "id": "E10",
  "A1": "01. Creation"
}'
orionCurl --url /v2/entities --payload "$payload" --json
echo
echo


echo "02. Subscribe to E1.*/A1, duration 2 secs"
echo "========================================="
payload='{
  "entities": [
    {
        "id":   "E1.*",
        "isPattern": "true"
    }
  ],
  "attributes": [
    "A1"
  ],
  "throttling": "PT1S",
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "PT2S",
  "notifyConditions": [
    {
        "type": "ONCHANGE",
        "condValues": [
            "A1"
        ]
    }
  ]
}'
orionCurl --url /v1/subscribeContext --payload "$payload" --json
SUB_ID=$(echo "$_response" | grep subscriptionId |  awk -F ':' '{gsub(/[ \t",]+/, "", $2); print $2}' )
echo
echo


echo "03. Statistics - just for fun"
echo "============================="
orionCurl --url /statistics --json
echo
echo


echo "04. Sleep 3 secs to let the subscription expire"
echo "==============================================="
sleep 3
echo
echo


echo "05. Update subscription, duration 30 secs"
echo "========================================="
payload='{
  "subscriptionId": "'$SUB_ID'",
  "duration": "PT30S"
}'
orionCurl --url /v1/updateContextSubscription --payload "$payload" --json
echo
echo



echo "06. Statistics - to see the sub-update"
echo "======================================"
orionCurl --url /statistics --json
echo
echo


echo "07. Sleep 6 secs to let the cache be refreshed"
echo "=============================================="
sleep 6
echo
echo


echo "08. Statistics - see 2 refresh, one notification"
echo "================================================"
orionCurl --url /statistics --json
echo
echo


echo "09. Update E10/A1"
echo "================="
payload='{
  "A1": "09. Updated"
}'
orionCurl --url /v2/entities/E10 --payload "$payload" --json
echo
echo


echo "10. Update E10/A1"
echo "================="
sleep 2
payload='{
  "A1": "10. Updated"
}'
orionCurl --url /v2/entities/E10 --payload "$payload" --json
echo
echo


echo "11. Update E10/A1"
echo "================="
sleep 2
payload='{
  "A1": "11. Updated"
}'
orionCurl --url /v2/entities/E10 --payload "$payload" --json
echo
echo


echo "12. Statistics - see 2 refresh, four notifications"
echo "=================================================="
orionCurl --url /statistics --json
echo
echo


echo "13. Dump accumulator - see four notifications"
echo "============================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Create entity E10, attribute A1
===================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E10
Date: REGEX(.*)



02. Subscribe to E1.*/A1, duration 2 secs
=========================================
HTTP/1.1 200 OK
Content-Length: 136
Content-Type: application/json
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "PT2S",
        "subscriptionId": "REGEX([0-9a-f]{24})",
        "throttling": "PT1S"
    }
}


03. Statistics - just for fun
=============================
HTTP/1.1 200 OK
Content-Length: REGEX(\d+)
Content-Type: application/json
Date: REGEX(.*)

{
    "jsonRequests": "3",
    "measuring_interval_in_secs": "REGEX(\d+)",
    "notificationsSent": "1",
    "statisticsRequests": "1",
    "subCache": "REGEX(.*)",
    "subCacheInserts": "1",
    "subCacheItems": "1",
    "subCacheRefreshs": "1",
    "subCacheRemoves": "0",
    "subCacheUpdates": "0",
    "subscriptions": "1",
    "uptime_in_secs": "REGEX(\d+)",
    "versionRequests": "0"
}


04. Sleep 3 secs to let the subscription expire
===============================================


05. Update subscription, duration 30 secs
=========================================
HTTP/1.1 200 OK
Content-Length: 110
Content-Type: application/json
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "PT30S",
        "subscriptionId": "REGEX([0-9a-f]{24})"
    }
}


06. Statistics - to see the sub-update
======================================
HTTP/1.1 200 OK
Content-Length: REGEX(\d+)
Content-Type: application/json
Date: REGEX(.*)

{
    "jsonRequests": "4",
    "measuring_interval_in_secs": "REGEX(\d+)",
    "notificationsSent": "1",
    "statisticsRequests": "2",
    "subCache": "REGEX(.*)",
    "subCacheInserts": "2",
    "subCacheItems": "1",
    "subCacheRefreshs": "1",
    "subCacheRemoves": "1",
    "subCacheUpdates": "1",
    "subscriptionUpdates": "1",
    "subscriptions": "1",
    "uptime_in_secs": "REGEX(\d+)",
    "versionRequests": "0"
}


07. Sleep 6 secs to let the cache be refreshed
==============================================


08. Statistics - see 2 refresh, one notification
================================================
HTTP/1.1 200 OK
Content-Length: REGEX(\d+)
Content-Type: application/json
Date: REGEX(.*)

{
    "jsonRequests": "4",
    "measuring_interval_in_secs": "REGEX(\d+)",
    "notificationsSent": "1",
    "statisticsRequests": "3",
    "subCache": "REGEX(.*)",
    "subCacheInserts": "3",
    "subCacheItems": "1",
    "subCacheRefreshs": "2",
    "subCacheRemoves": "1",
    "subCacheUpdates": "1",
    "subscriptionUpdates": "1",
    "subscriptions": "1",
    "uptime_in_secs": "REGEX(\d+)",
    "versionRequests": "0"
}


09. Update E10/A1
=================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E10
Date: REGEX(.*)



10. Update E10/A1
=================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E10
Date: REGEX(.*)



11. Update E10/A1
=================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E10
Date: REGEX(.*)



12. Statistics - see 2 refresh, four notifications
==================================================
HTTP/1.1 200 OK
Content-Length: REGEX(\d+)
Content-Type: application/json
Date: REGEX(.*)

{
    "jsonRequests": "10",
    "measuring_interval_in_secs": "REGEX(\d+)",
    "notificationsSent": "4",
    "statisticsRequests": "4",
    "subCache": "REGEX(.*)",
    "subCacheInserts": "3",
    "subCacheItems": "1",
    "subCacheRefreshs": "2",
    "subCacheRemoves": "1",
    "subCacheUpdates": "1",
    "subscriptionUpdates": "1",
    "subscriptions": "1",
    "uptime_in_secs": "REGEX(\d+)",
    "versionRequests": "0"
}


13. Dump accumulator - see four notifications
=============================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 467
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "originator" : "localhost",
  "contextResponses" : [
    {
      "contextElement" : {
        "type" : "",
        "isPattern" : "false",
        "id" : "E10",
        "attributes" : [
          {
            "name" : "A1",
            "type" : "",
            "value" : "01. Creation"
          }
        ]
      },
      "statusCode" : {
        "code" : "200",
        "reasonPhrase" : "OK"
      }
    }
  ]
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 466
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "originator" : "localhost",
  "contextResponses" : [
    {
      "contextElement" : {
        "type" : "",
        "isPattern" : "false",
        "id" : "E10",
        "attributes" : [
          {
            "name" : "A1",
            "type" : "",
            "value" : "09. Updated"
          }
        ]
      },
      "statusCode" : {
        "code" : "200",
        "reasonPhrase" : "OK"
      }
    }
  ]
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 466
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "originator" : "localhost",
  "contextResponses" : [
    {
      "contextElement" : {
        "type" : "",
        "isPattern" : "false",
        "id" : "E10",
        "attributes" : [
          {
            "name" : "A1",
            "type" : "",
            "value" : "10. Updated"
          }
        ]
      },
      "statusCode" : {
        "code" : "200",
        "reasonPhrase" : "OK"
      }
    }
  ]
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 466
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "originator" : "localhost",
  "contextResponses" : [
    {
      "contextElement" : {
        "type" : "",
        "isPattern" : "false",
        "id" : "E10",
        "attributes" : [
          {
            "name" : "A1",
            "type" : "",
            "value" : "11. Updated"
          }
        ]
      },
      "statusCode" : {
        "code" : "200",
        "reasonPhrase" : "OK"
      }
    }
  ]
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
